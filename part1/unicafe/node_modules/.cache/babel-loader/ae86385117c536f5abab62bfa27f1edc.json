{"ast":null,"code":"var _jsxFileName = \"/Users/andrewgao/Documents/fullstackopen/part1/unicafe/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // a proper place to define a component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = props => {\n  if (props.good + props.bad + props.neutral === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Feedback Given \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" statistics \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"good\",\n      value: props.good\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"neutral\",\n      value: props.neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"bad\",\n      value: props.bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"all\",\n      value: props.good + props.bad + props.neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"average\",\n      value: avg(props.good, props.bad, props.neutral)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StatisticLine, {\n      text: \"positive\",\n      value: positive(props.good, props.bad, props.neutral)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const increaseGood = () => setGood(good + 1);\n\n  const increaseNeutral = () => setNeutral(neutral + 1);\n\n  const increaseBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Give Feedback \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increaseGood,\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increaseNeutral,\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increaseBad,\n      children: \"Bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      bad: bad,\n      neutral: neutral\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c2 = App;\n\nconst StatisticLine = props => /*#__PURE__*/_jsxDEV(\"p\", {\n  children: [\" \", props.text, \" \", props.value]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 45,\n  columnNumber: 3\n}, this);\n\n_c3 = StatisticLine;\n\nconst avg = (good, bad, neutral) => {\n  if (good + bad + neutral === 0) {\n    return 0;\n  }\n\n  return (good + bad * -1) / (good + neutral + bad);\n};\n\nconst positive = (good, bad, neutral) => {\n  if (good + bad + neutral === 0) {\n    return 0 + \"%\";\n  }\n\n  return good / (good + neutral + bad) * 100 + \"%\";\n};\n\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"StatisticLine\");","map":{"version":3,"sources":["/Users/andrewgao/Documents/fullstackopen/part1/unicafe/src/App.js"],"names":["React","useState","Statistics","props","good","bad","neutral","avg","positive","App","setGood","setNeutral","setBad","increaseGood","increaseNeutral","increaseBad","StatisticLine","text","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\n// a proper place to define a component\nconst Statistics = (props) => {\n  if (props.good + props.bad + props.neutral === 0 ){\n    return(<p>No Feedback Given </p>)\n  } \n  return(\n    <div>\n      <h2> statistics </h2>\n      <StatisticLine text=\"good\" value={props.good}/>\n      <StatisticLine text=\"neutral\" value={props.neutral}/>\n      <StatisticLine text=\"bad\" value={props.bad}/>\n      <StatisticLine text=\"all\" value={props.good + props.bad + props.neutral}/>\n      <StatisticLine text=\"average\" value={avg(props.good,props.bad,props.neutral)}/>\n      <StatisticLine text=\"positive\" value={positive(props.good,props.bad,props.neutral)}/>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n\n  const increaseGood = () => setGood(good + 1)\n  const increaseNeutral = () => setNeutral(neutral + 1)\n  const increaseBad = () => setBad(bad + 1)\n\n\n\n  return (\n    <div>\n      <h1> Give Feedback </h1>\n      <button onClick={increaseGood}>good</button>\n      <button onClick={increaseNeutral}>neutral</button>\n      <button onClick={increaseBad}>Bad</button>\n      <Statistics good={good} bad={bad} neutral={neutral}/>\n    </div>\n  )\n}\n\nconst StatisticLine = (props) => (\n  <p> {props.text} {props.value}</p>\n)\n\nconst avg = (good,bad,neutral) => {\n\n  if(good + bad + neutral === 0){\n    return 0\n  }\n  return ((good + (bad * (-1)))/(good + neutral + bad))\n}\n\nconst positive = (good,bad,neutral) => {\n\n  if(good + bad + neutral === 0){\n    return 0 + \"%\"\n  }\n  return ((good/(good + neutral + bad))* 100) + \"%\"\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}